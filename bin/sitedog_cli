#!/usr/bin/env ruby

require 'bundler/setup'
require 'sitedog_parser'
require 'optparse'
require 'logger'
require 'yaml'
require 'json'
require 'net/http'
require 'uri'
require 'fileutils'

# Класс клиента для взаимодействия с SiteDog Cloud API
class SiteDogClient
  API_URL = 'http://localhost:3005/api/v1'
  CONFIG_DIR = File.join(Dir.home, '.sitedog')
  CONFIG_FILE = File.join(CONFIG_DIR, 'config.json')

  attr_accessor :test_mode

  def initialize(test_mode = false)
    @config = load_config
    @test_mode = test_mode
  end

  def login(email, password)
    uri = URI.parse("#{API_URL}/login")
    params = { email: email, password: password }

    response = Net::HTTP.post(uri, params.to_json, 'Content-Type' => 'application/json')

    if response.code == '200'
      result = JSON.parse(response.body)
      if result['status'] == 'success'
        @config['api_key'] = result['api_key']
        save_config
        puts "Авторизация успешна! API-ключ сохранен."
        return true
      else
        puts "Ошибка: #{result['message']}"
      end
    else
      puts "Ошибка: #{response.code} - #{response.message}"
    end

    false
  end

  def push_card(file_path, title = nil)
    unless authenticated?
      puts "Ошибка: Сначала выполните вход (sitedog_cli login <email> <password>)"
      return false
    end

    # Используем имя файла как заголовок, если заголовок не указан
    title = File.basename(file_path) if title.nil? || title.empty?

    unless File.exist?(file_path)
      puts "Ошибка: Файл не найден: #{file_path}"
      return false
    end

    content = File.read(file_path)

    # Проверяем, что содержимое является валидным YAML
    begin
      yaml_content = YAML.load(content)
    rescue => e
      puts "Ошибка: Недопустимый YAML-файл: #{e.message}"
      return false
    end

    # В тестовом режиме просто показываем информацию
    if @test_mode
      puts "=== ТЕСТОВЫЙ РЕЖИМ ==="
      puts "Отправка данных на API..."
      puts "Заголовок: #{title}"
      puts "Файл: #{file_path}"
      puts "Содержимое (сокращено):"
      puts "  #{yaml_content.keys.join(", ")}"
      puts "=== УСПЕШНО ==="
      return true
    end

    uri = URI.parse("#{API_URL}/cards")
    params = { card: { title: title, content: content } }

    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Post.new(uri.request_uri)
    request['Content-Type'] = 'application/json'
    request['Authorization'] = "Bearer #{@config['api_key']}"
    request.body = params.to_json

    response = http.request(request)

    if response.code == '201'
      result = JSON.parse(response.body)
      puts "Карточка успешно отправлена!"
      puts "ID: #{result['data']['id']}"
      puts "Заголовок: #{result['data']['title']}"
      return true
    else
      puts "Ошибка: #{response.code} - #{response.message}"
      puts response.body if response.body
      return false
    end
  end

  private

  def authenticated?
    # В тестовом режиме всегда считаем, что аутентификация пройдена
    return true if @test_mode

    # Проверяем наличие API-ключа
    @config && @config['api_key']
  end

  def load_config
    return {} unless File.exist?(CONFIG_FILE)

    begin
      JSON.parse(File.read(CONFIG_FILE))
    rescue
      {}
    end
  end

  def save_config
    FileUtils.mkdir_p(CONFIG_DIR) unless Dir.exist?(CONFIG_DIR)
    File.write(CONFIG_FILE, @config.to_json)
  end
end

# Проверка, если первый аргумент - команда для API
if ARGV.size > 0 && ['login', 'push'].include?(ARGV[0])
  command = ARGV.shift

  # Создаем клиент только для login, для push будет создан позже с test_mode
  if command == 'login'
    client = SiteDogClient.new

    if ARGV.size < 2
      puts "Ошибка: Требуется email и пароль"
      puts "Использование: sitedog_cli login <email> <password>"
      exit 1
    end

    email = ARGV[0]
    password = ARGV[1]
    exit(client.login(email, password) ? 0 : 1)
  elsif command == 'push'
    # По умолчанию ищем .sitedog в текущей директории
    default_file = '.sitedog'

    # Проверяем опции для тестового режима
    test_mode = false
    if ARGV.include?('--test')
      test_mode = true
      ARGV.delete('--test')
    end

    if ARGV.empty?
      # Если аргументы отсутствуют, используем файл по умолчанию
      if File.exist?(default_file)
        file_path = default_file
        title = File.basename(Dir.pwd)  # Используем имя текущей директории как заголовок
      else
        puts "Ошибка: Файл #{default_file} не найден в текущей директории."
        puts "Использование: sitedog_cli push [file_path] [--test]"
        exit 1
      end
    else
      # Первый аргумент - путь к файлу
      file_path = ARGV[0]
      title = File.basename(file_path)  # Используем имя файла как заголовок по умолчанию
    end

    client = SiteDogClient.new(test_mode)
    exit(client.push_card(file_path, title) ? 0 : 1)
  end

  exit 0
end

# Для стандартной функциональности парсинга YAML -> JSON
# Set default options
options = {
  debug: false,
  pretty: true,
  compact_children: false,
  output: nil,
  log_level: Logger::INFO
}

# Create logger
logger = Logger.new(STDOUT)
logger.formatter = proc do |severity, datetime, progname, msg|
  "#{msg}\n"
end

# Command line options parser
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: sitedog_cli [options] <path_to_yaml_file> [output_file]"
  opts.separator ""
  opts.separator "Commands:"
  opts.separator "  login <email> <password> - войти в систему и получить API-ключ"
  opts.separator "  push [file_path] - отправить YAML-файл как карточку (по умолчанию использует .sitedog)"
  opts.separator "    --test - запустить в тестовом режиме без отправки данных на сервер"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-d", "--debug", "Enable debug output") do
    options[:debug] = true
    options[:log_level] = Logger::DEBUG
  end

  opts.on("-c", "--compact", "Output compact JSON (without pretty formatting)") do
    options[:pretty] = false
  end

  opts.on("--compact-children", "-C", "Format JSON with compact inner objects (one line per service)") do
    options[:compact_children] = true
  end

  opts.on("-q", "--quiet", "Suppress non-error messages") do
    options[:log_level] = Logger::ERROR
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end

# Parse options
option_parser.parse!(ARGV)

# Set logging level
logger.level = options[:log_level]

# Check command line arguments
if ARGV.empty? || ARGV.size < 1 || ARGV.size > 2
  logger.error option_parser.help
  exit 1
end

file_path = ARGV[0]
output_path = ARGV[1]

# Check if input file exists
unless File.exist?(file_path)
  logger.error "Error: File '#{file_path}' not found."
  exit 1
end

# Redirect STDERR to hide debug output if not in debug mode
unless options[:debug]
  original_stderr = $stderr.dup
  $stderr.reopen(File.open(File::NULL, 'w'))
end

# Format JSON with inner objects on a single line
def compact_json_generate(data)
  # Clone data to avoid modifying the original
  formatted_data = Marshal.load(Marshal.dump(data))

  # Process each domain
  formatted_data.each do |domain_key, services|
    # For each service type
    services.each do |service_type, service_array|
      if service_array.is_a?(Array)
        # Convert service array to compact format
        services[service_type] = service_array.map do |service_obj|
          # Remove empty children arrays for compactness
          if service_obj['children'] && service_obj['children'].empty?
            service_obj.delete('children')
          end
          service_obj
        end
      end
    end
  end

  # Convert to JSON with indentation at top level, but compact inner objects
  output = "{\n"

  formatted_data.each_with_index do |(domain, services), domain_index|
    output << "  \"#{domain}\": {\n"

    services.keys.each_with_index do |service_type, service_index|
      service_data = services[service_type]

      # Start line with service type
      output << "    \"#{service_type}\": "

      # Special formatting for service arrays - on a single line
      if service_data.is_a?(Array)
        items = service_data.map { |item| JSON.generate(item) }.join(",")
        output << "[#{items}]"
      else
        # For non-arrays use standard JSON.generate
        output << JSON.generate(service_data)
      end

      # Add comma for all elements except the last one
      output << (service_index < services.keys.size - 1 ? ",\n" : "\n")
    end

    output << "  }"
    output << (domain_index < formatted_data.size - 1 ? ",\n" : "\n")
  end

  output << "}"
  output
end

begin
  logger.debug "Processing file: #{file_path}"

  # Load YAML to check raw data
  raw_yaml = YAML.load_file(file_path)
  if options[:debug]
    logger.debug "Raw YAML data for debug:"
    logger.debug raw_yaml.inspect
    logger.debug ""
  end

  # Convert YAML to hash
  data = SitedogParser::Parser.to_hash(file_path, { logger: logger })
  logger.debug "Data converted to hash"

  # Debug the parsed data
  if options[:debug]
    logger.debug "Parsed data structure:"
    logger.debug data.inspect
    logger.debug ""
  end

  # Convert to JSON based on formatting options
  json_data = if options[:compact_children]
                logger.debug "Generating JSON with compact inner objects"
                compact_json_generate(data)
              elsif options[:pretty]
                logger.debug "Generating pretty JSON"
                JSON.pretty_generate(data)
              else
                logger.debug "Generating compact JSON"
                JSON.generate(data)
              end

  # If output file is specified, save result to it
  if output_path
    logger.debug "Saving to file: #{output_path}"
    File.write(output_path, json_data)
    logger.info "JSON data successfully saved to '#{output_path}'."
  else
    # Otherwise print JSON to screen
    # Use puts directly for JSON output to avoid logger prefixes
    puts json_data
  end

rescue => e
  # Restore STDERR for error messages
  $stderr.reopen(original_stderr) unless options[:debug]

  logger.error "Error processing file: #{e.message}"
  logger.debug e.backtrace.join("\n") if options[:debug]
  exit 1
ensure
  # Restore STDERR
  $stderr.reopen(original_stderr) unless options[:debug]
end